/* udg_sec.edl - Top EDL file. */

enclave {
    
    from "sgx_tae_service.edl" import *;
    
    /* 
     * ocall_udg_sec_sample - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
     
     /*
     untrusted {
        void ocall_notary_sec_sample([in, string] const char *str);
        void ocall_write_hash_file([in, size=len] const char* data, size_t len, [out] int* ret);
        void ocall_read_hash_file([out, size=len] char* buf, size_t len, [out] int* ret);
        void ocall_read_hash_file_size([out] size_t* ret);
        void ocall_write_sock(int fd, [in, size=len] const uint8_t * data, size_t len, [out] int* ret);
        void ocall_read_sock(int fd, [out, size=len] uint8_t * data, size_t len, [out] int* ret);
    	void ocall_open_sock([in, string] const char* hostname, [out] int* fd);
    	int sgx_shutdown(int sockfd, int how);
    };
     */
     
    untrusted {
        void ocall_debug([in, string] const char* str);
        void ocall_print([in, string] const char* str);
        
        void ocall_tcp_socket([out] int* sock);
        void ocall_udp_socket([out] int* sock);
        void ocall_connect_socket([out] int* res, int fd, uint32_t addr, uint16_t port);
        void ocall_send([out] long* res, int sockfd, [in, size=len] const void *buf, size_t len, int flags);
        void ocall_recv([out] long* res, int sockfd, [out, size=len] void *buf, size_t len, int flags);
        
        void ocall_shutdown([out] int* res, int sockfd, int how);
        
        void ocall_file_size([out] size_t* res, [in, string] const char* filename);
        void ocall_read_file([out] int* res, [in, string] const char* filename, [out, size=len] void* out, size_t len);
        void ocall_write_file([out] int* res, [in, string] const char* filename, [in, size=len] const void* in, size_t len); // Beware confused deputies!
        
        void ocall_sysopen([out] int* fd, [in, string] const char* filename, [in, string] const char* mode);
        void ocall_syswrite([out] long* out, int fd, [in, size=len] const void *buf, size_t len);
        void ocall_sysread([out] long* out, int fd, [out, size=len] void* buf, size_t len);
        void ocall_sysclose(int fd);
        void ocall_syslseek([out] long* off, int fd, long offset, int whence);
        
        
        void ocall_get_sys_ip([in, out, string] char* addr);
        
        void ocall_db_open([out] int* ret, [in,string] const char* filename, int create_if_not_exists);
        void ocall_db_close(int db_ref);
        void ocall_db_put(int db_ref, [in, string] const char* key, [in, string] const char* value);
        void ocall_db_get([out] long* ret_bytes, int db_ref, [in, string] const char* key, [out, size=buf_len] char* value, size_t buf_len);
        void ocall_db_del(int db_ref, [in, string] const char* key);
    };


    trusted {
    	    public int ecall_udg_sec_main();
    	    public int ecall_udg_test_ECIES();
    	    public int ecall_udg_test_RLPxHandshake();
    	    public int ecall_udg_test_rlp();
    	    public int ecall_udg_test_uint256();
    	    public int ecall_udg_generate_epoch(int epoch);
    	    public int ecall_udg_read_epoch(int epoch);
    	    public int ecall_udg_size_epoch(int epoch);
    	    public int ecall_udg_print_pubkey();
    	    public int ecall_udg_recover([in, string] const char* signature, [in, string] const char* message);
    	    public int ecall_udg_process([in, string] const char* block_rlp);
    	    public int ecall_test();
    	    
    	    public int ecall_udg_parse([in, string] const char* block_rlp);
    	    public int ecall_udg_verify([in, string] const char* block_rlp);
    	    
    };
};
